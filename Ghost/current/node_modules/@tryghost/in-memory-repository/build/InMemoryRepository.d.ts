type Entity<T> = {
    id: T;
    deleted: boolean;
};
type Order<T> = {
    field: keyof T;
    direction: 'asc' | 'desc';
};
type OrderOption<T extends Entity<any>> = Order<T>[];
export declare abstract class InMemoryRepository<IDType, T extends Entity<IDType>> {
    protected store: T[];
    private ids;
    constructor();
    protected abstract toPrimitive(entity: T): object;
    save(entity: T): Promise<void>;
    getById(id: string): Promise<T | null>;
    getAll(options?: {
        filter?: string;
        order?: OrderOption<T>;
    }): Promise<T[]>;
    getPage(options?: {
        filter?: string;
        page: number;
        limit: number;
        order?: Order<T>[];
    }): Promise<T[]>;
    getCount(options: {
        filter?: string;
    }): Promise<number>;
}
export {};
