type PostLike = {
    id: string;
    lexical: string;
    html: string;
    author_id: string;
    feature_image: string | null;
    feature_image_alt: string | null;
    feature_image_caption: string | null;
    title: string;
    reason: string;
    post_status: string;
};
type Revision = {
    post_id: string;
    lexical: string;
    author_id: string;
    feature_image: string | null;
    feature_image_alt: string | null;
    feature_image_caption: string | null;
    title: string;
    post_status: string;
    reason: string;
    created_at_ts: number;
};
type PostRevisionsDeps = {
    config: {
        max_revisions: number;
        revision_interval_ms: number;
    };
    model: any;
};
type RevisionResult = {
    value: true;
    reason: string;
} | {
    value: false;
};
export declare class PostRevisions {
    config: PostRevisionsDeps['config'];
    model: any;
    constructor(deps: PostRevisionsDeps);
    shouldGenerateRevision(current: PostLike, revisions: Revision[], options?: {
        isPublished?: boolean;
        forceRevision?: boolean;
        newStatus?: string;
        olderStatus?: string;
    }): RevisionResult;
    getRevisions(current: PostLike, revisions: Revision[], options?: {
        isPublished?: boolean;
        forceRevision?: boolean;
        newStatus?: string;
        olderStatus?: string;
    }): Promise<Revision[]>;
    convertPostLikeToRevision(input: PostLike, offset?: number): Revision;
    removeAuthorFromRevisions(authorId: string, options: any): Promise<void>;
}
export {};
