import { Collection } from './Collection';
import { CollectionRepository } from './CollectionRepository';
import { PostEditedEvent } from './events/PostEditedEvent';
interface SlugService {
    generate(desired: string): Promise<string>;
}
type CollectionsServiceDeps = {
    collectionsRepository: CollectionRepository;
    postsRepository: PostsRepository;
    slugService: SlugService;
    DomainEvents: {
        subscribe: (event: any, handler: (e: any) => void) => void;
    };
};
type CollectionPostDTO = {
    id: string;
    sort_order: number;
};
type CollectionPostListItemDTO = {
    id: string;
    slug: string;
    title: string;
    featured: boolean;
    featured_image?: string;
    published_at: Date;
};
type ManualCollection = {
    title: string;
    type: 'manual';
    slug?: string;
    description?: string;
    feature_image?: string;
    filter?: null;
    deletable?: boolean;
};
type AutomaticCollection = {
    title: string;
    type: 'automatic';
    filter: string;
    slug?: string;
    description?: string;
    feature_image?: string;
    deletable?: boolean;
};
type CollectionInputDTO = ManualCollection | AutomaticCollection;
type CollectionDTO = {
    id: string;
    title: string | null;
    slug: string;
    description: string | null;
    feature_image: string | null;
    type: 'manual' | 'automatic';
    filter: string | null;
    created_at: Date;
    updated_at: Date | null;
    posts: CollectionPostDTO[];
};
type QueryOptions = {
    filter?: string;
    include?: string;
    page?: number;
    limit?: number;
};
interface PostsRepository {
    getAll(options: QueryOptions): Promise<any[]>;
    getBulk(ids: string[]): Promise<any[]>;
}
export declare class CollectionsService {
    private collectionsRepository;
    private postsRepository;
    private DomainEvents;
    private uniqueChecker;
    private slugService;
    constructor(deps: CollectionsServiceDeps);
    private toDTO;
    private fromDTO;
    /**
     * @description Subscribes to Domain events to update collections when posts are added, updated or deleted
     */
    subscribeToEvents(): void;
    createCollection(data: CollectionInputDTO): Promise<CollectionDTO>;
    addPostToCollection(collectionId: string, post: CollectionPostListItemDTO): Promise<CollectionDTO | null>;
    private updateAutomaticCollectionItems;
    private removePostFromAllCollections;
    private addPostToMatchingCollections;
    /**
     * @description Updates all automatic collections. Can be time intensive and is a temporary solution
     * while all of the events are mapped out and handled optimally
     */
    updateCollections(): Promise<void>;
    updatePostInMatchingCollections(postEdit: PostEditedEvent['data']): Promise<void>;
    edit(data: any): Promise<CollectionDTO | null>;
    getById(id: string): Promise<Collection | null>;
    getBySlug(slug: string): Promise<Collection | null>;
    getAll(options?: QueryOptions): Promise<{
        data: CollectionDTO[];
        meta: any;
    }>;
    getAllPosts(id: string, { limit, page }: QueryOptions): Promise<{
        data: CollectionPostListItemDTO[];
        meta: any;
    }>;
    getCollectionsForPost(postId: string): Promise<CollectionDTO[]>;
    destroy(id: string): Promise<Collection | null>;
    removePostFromCollection(id: string, postId: string): Promise<CollectionDTO | null>;
}
export {};
